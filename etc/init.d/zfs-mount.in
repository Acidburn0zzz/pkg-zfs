#!/bin/bash
#
# zfs-mount     This script will mount/umount the zfs filesystems.
#
# chkconfig:    2345 06 99
# description:  This script will mount/umount the zfs filesystems during
#               system boot/shutdown. Configuration of which filesystems
#               should be mounted is handled by the zfs 'mountpoint' and
#               'canmount' properties. See the zfs(8) man page for details.
#               It is also responsible for all userspace zfs services.
# probe: true
#
### BEGIN INIT INFO
# Provides:          zfs-mount
# Required-Start:    $local_fs zfs-import
# Required-Stop:     $local_fs zfs-import
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Stop-After:      zfs-share
# Short-Description: Mount ZFS filesystems and volumes
# Description: Run the `zfs mount -a` or `zfs umount -a` commands.
### END INIT INFO

# Source the common init script
. @sysconfdir@/zfs/common.init
servicename=zfs-mount

# ----------------------------------------------------

# Mount all datasets/filesystems
do_mount()
{
	local verbose overlay RET i

	[ "$VERBOSE_MOUNT" == 'yes' ] && verbose=v
	[ "$DO_OVERLAY_MOUNTS" == 'yes' ] && overlay=O

	zfs_action "Mounting ZFS filesystem(s)" \
	    "$ZFS" mount -a$verbose$overlay $MOUNT_EXTRA_OPTIONS

	# Require each volume/filesytem to have 'noauto' and no fsck
	# option. This shouldn't really be necessary, as long as one
	# can get zfs-import to run sufficiently early on in the boot
	# process - before local mounts. This is just here in case/if
	# this isn't possible.
	[ "$VERBOSE_MOUNT" == 'yes' ] && \
	    zfs_log_begin_msg "Mounting volumes and filesystems registered in fstab"
	read_mtab  "^/dev/(zd|zvol)"
	read_fstab "^/dev/(zd|zvol)"
	for i in "${!FSTAB[@]}" ; do
		in_mtab "${FSTAB[$i]}" && continue
		is_mounted "${FSTAB[$i]}" && continue

		[ "$VERBOSE_MOUNT" == 'yes' ] && \
		    zfs_log_progress_msg "${FSTAB[$i]} "
		fsck "${FSTAB[$i]}" && mount "${FSTAB[$i]}"
	done

	read_mtab  "zfs"
	read_fstab "zfs"
	for i in "${!FSTAB[@]}" ; do
		in_mtab "${FSTAB[$i]}" && continue
		is_mounted "${FSTAB[$i]}" && continue

		[ "$VERBOSE_MOUNT" == 'yes' ] && \
		    zfs_log_progress_msg "${FSTAB[$i]} "
		mount "${FSTAB[$i]}"
	done
	[ "$VERBOSE_MOUNT" == 'yes' ] && zfs_log_end_msg 0

	return 0
}

# Unmount all filesystems
do_unmount()
{
	local i

	# This shouldn't really be necessary, as long as one can get
	# zfs-import to run sufficiently late in the shutdown/reboot process
	# - after unmounting local filesystems. This is just here in case/if
	# this isn't possible.
	zfs_action "Unmounting ZFS filesystems" "$ZFS" unmount -a
	[ "$VERBOSE_MOUNT" == 'yes' ] && \
	    zfs_log_begin_msg "Unmounting volumes and filesystems registered in fstab"
	read_mtab  "^/dev/(zd|zvol)"
	read_fstab "^/dev/(zd|zvol)"
	for i in "${!FSTAB[@]}" ; do
		dev=/dev/$(find "${FSTAB[$i]}" | sed 's@.*/@@')
		in_mtab "$dev" && continue
		is_mounted "${FSTAB[$i]}" || continue

		[ "$VERBOSE_MOUNT" == 'yes' ] && \
		    zfs_log_progress_msg "${FSTAB[$i]} "
		umount "${FSTAB[$i]}"
	done

	read_mtab  "zfs"
	read_fstab "zfs"
	for i in "${!FSTAB[@]}" ; do
		in_mtab "${FSTAB[$i]}" && continue
		is_mounted "${FSTAB[$i]}" || continue

		[ "$VERBOSE_MOUNT" == 'yes' ] && \
		    zfs_log_progress_msg "${FSTAB[$i]} "
		umount "${FSTAB[$i]}"
	done
	[ "$VERBOSE_MOUNT" == 'yes' ] && zfs_log_end_msg 0
}

start()
{
	# fix mtab to include already-mounted fs filesystems, in case there are any
	# we ONLY do this if mtab does not point to /proc/mounts
	# which is the case in some systems (systemd may bring that soon)
	if ! readlink /etc/mtab | grep -q /proc ; then
		if grep -qE "(^/dev/zd|^/dev/zvol| zfs )" /proc/mounts ; then
			zfs_action "Registering already-mounted ZFS filesystems and volumes" \
			    reregister_mounts
		fi
	fi

	# Ensure / exists in /etc/mtab, if not update mtab accordingly.
	# This should be handled by rc.sysinit but lets be paranoid.
	awk '$2 == "/" { exit 1 }' /etc/mtab
	RETVAL=$?
	if [ "$RETVAL" -eq 0 ]; then
		mount -f /
	fi

	case "$ZFS_MOUNT" in
		([Oo][Ff][Ff]|[Nn][Oo]|'')
			exit 3
			;;
	esac

	do_mount
}

stop()
{
	case "$ZFS_UNMOUNT" in
		([Oo][Ff][Ff]|[Nn][Oo]|'')
			exit 0
			;;
	esac

	check_module_loaded || exit 0

	do_unmount
}

# ----------------------------------------------------

case "$1" in
	(start)
		start
		;;
	(stop)
		stop
		;;
	(force-reload|condrestart|reload|restart|status)
		# no-op
		;;
	(*)
		[ -n "$1" ] && echo "Error: Unknown command $1."
		echo "Usage: $0 {start|stop}"
		exit 3
		;;
esac
