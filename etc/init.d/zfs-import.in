#!/bin/bash
#
# zfs-mount     This script will import/export zfs pools.
#
# chkconfig:    2345 01 99
# description:  This script will import/export zfs pools during system
#               boot/shutdown.
#               It is also responsible for all userspace zfs services.
# probe: true
#
### BEGIN INIT INFO
# Provides:          zfs-import zpool
# Required-Start:    mountnfs-bootclean
# Required-Stop:     $local_fs
# Default-Start:     S
# X-Stop-After:      zfs-mount
# Default-Stop:      0 1 6
# Short-Description: Import ZFS pools
# Description: Run the `zpool import` or `zpool export` commands.
### END INIT INFO

# Source the common init script
. @sysconfdir@/zfs/common.init
servicename=zfs-import

# ----------------------------------------------------

# Import all pools
do_import()
{
	POOL_IMPORTED=
	already_imported=$(zpool list -H -oname)
	available_pools=$(zpool import 2> /dev/null | grep pool: | sed 's@.*: @@')

	# Just in case - seen it happen
	if [ -z "$available_pools" -a -n "$USE_DISK_BY_ID" -a "$USE_DISK_BY_ID" == 'yes' ]; then
		available_pools=$(zpool import -d /dev/disk/by-id 2> /dev/null | \
		    grep pool: | sed 's@.*: @@')
	fi

	# Filter out any exceptions...
	if [ -n "$ZFS_POOL_EXCEPTIONS" ]; then
		for pool in $available_pools; do
			for exception in $ZFS_POOL_EXCEPTIONS; do
				[ "$pool" != "$exception" ] && apools="$pool"
			done
		done

		available_pools=$apools
	fi

	for pool in $available_pools; do
		# We have pools that haven't been imported - import them
		if [ "$USE_DISK_BY_ID" == 'yes' ]; then
			# Really the default/prefered way.
			$log_begin_msg "Importing ZFS pool $pool using:"
			for dir in /dev/disk/by-vdev /dev/disk/by-* /dev; do
				$log_progress_msg "$dir "
				"$ZPOOL" import -d $dir -N $pool 2>/dev/null
				RET=$?
				if [ "$RET" -eq 0 ]; then
					POOL_IMPORTED=1
					$log_end_msg $RET
					continue 2
				fi
			done
		elif [ -f "$ZPOOL_CACHE" ] ; then
			# Fallback - use a cache file
			$log_begin_msg "Importing ZFS pools (using cache file)"
			"$ZPOOL" import -c "$ZPOOL_CACHE" -N $pool 2>/dev/null
			RET=$?
			if [ "$RET" -eq 0 ]; then
				POOL_IMPORTED=1
				$log_end_msg $RET
				continue 2
			fi
		else
			# Last ditch attempt, try /dev!
			$log_begin_msg "Importing ZFS pools"
			"$ZPOOL" import -N $pool 2>/dev/null
			RET=$?
			if [ "$RET" -eq 0 ]; then
				POOL_IMPORTED=1
				$log_end_msg $RET
				continue 2
			fi

			$log_end_msg $ret
		fi
	done

	if [ -n "$already_imported" -a -z "$available_pools" ]; then
		# All pools imported
		POOL_IMPORTED=1
		$log_end_msg $RET
	fi
}

# Export all pools
do_export()
{
	$log_begin_msg "Exporting ZFS pools"
	"$ZPOOL" list -H -o name | \
	    while read pool; do
		"$ZPOOL" export $pool
	    done
	rmmod zfs
	$log_end_msg 0 # return code not that important.
}

# Output the status and list of pools
status()
{
	[ ! -f "$LOCKDIR/$servicename" ] && return 3

	if ! grep -q zfs /proc/modules ; then
		# module not loaded, no point in running zpool.
		exit 0
	fi

	"$ZPOOL" status && echo "" && "$ZPOOL" list
}

do_start()
{
	checksystem && {
		do_import

		[ -n "$POOL_IMPORTED" ] && \
			touch "$LOCKDIR/$servicename"
	}
}

do_stop()
{
	# Check if ZFS is installed.  If not, comply to FC standards and bail
	zfs_installed || {
		$log_failure_msg "not installed"
		$log_end_msg 5
	}

	if ! grep -q zfs /proc/modules ; then
		# module not loaded, no need to umount anything
		exit 0
	fi

	set -- `mount | grep ' on / '`
	if [ "$5" != "zfs" ]; then
	    # Only export the pool if we're not running a zfs root.
	    # Won't work, because the filesystem (and therefor pool)
	    # is busy (being mounted :).
	    do_export
	fi

	rm -f "$LOCKDIR/$servicename"
}

# ----------------------------------------------------

case "$1" in
	(start)
		do_start
		;;
	(stop)
		do_stop
		;;
	(status)
		status
		;;
	(force-reload|condrestart|reload|restart)
		# no-op
		;;
	(*)
		[ -n "$1" ] && echo "Error: Unknown command $1."
		echo "Usage: $0 {start|stop|status}"
		exit 3
		;;
esac
