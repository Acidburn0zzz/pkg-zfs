# ZFS boot stub for initramfs-tools.
#
# In the initramfs environment, the /init script sources this stub to
# override the default functions in the /scripts/local script.
#
# Enable this by passing boot=zfs on the kernel command line.
#


pre_mountroot()
{
	if type run_scripts > /dev/null 2>&1 && [ -f "/scripts/local-top" -o -d "/scripts/local-top" ]
	then
		[ "$quiet" != "y" ] && $log_begin_msg "Running /scripts/local-top"
		run_scripts /scripts/local-top
		[ "$quiet" != "y" ] && $log_end_msg
	fi

	if [ -r '/etc/default/zfs' ]
	then
		. /etc/default/zfs
		if [ "$ZFS_INITRD_PRE_MOUNTROOT_SLEEP" -gt '0' ]
		then
			[ "$quiet" != "y" ] && $log_begin_msg "Sleeping for $ZFS_INITRD_PRE_MOUNTROOT_SLEEP seconds..."
			sleep "$ZFS_INITRD_PRE_MOUNTROOT_SLEEP"
			[ "$quiet" != "y" ] && $log_end_msg
		fi
	fi
}

# Duplicates the functionality found under try_failure_hooks in functions
# but invoking that would be inappropriate here.
disable_plymouth()
{
	if [ -x /bin/plymouth ] && /bin/plymouth --ping
	then
		/bin/plymouth hide-splash >/dev/null 2>&1
	fi
}

mountroot()
{
	pre_mountroot

	# Support debug option
	if grep -qiE '(^|[^\\](\\\\)* )(zfs_debug|zfs\.debug|zfsdebug)=(on|yes|1)( |$)' /proc/cmdline
	then
		ZPOOL_DEBUG=1
		set -x
	fi

	if type run_scripts > /dev/null 2>&1 && [ -f "/scripts/local-premount" -o -d "/scripts/local-premount" ]
	then
		[ "$quiet" != "y" ] && $log_begin_msg "Running /scripts/local-premount"
		run_scripts /scripts/local-premount
		[ "$quiet" != "y" ] && $log_end_msg
	fi

	# Wait for all of the /dev/{hd,sd}[a-z] device nodes to appear.
	if type wait_for_udev > /dev/null 2>&1 ; then
		wait_for_udev 10
	elif type wait_for_dev > /dev/null 2>&1 ; then
		wait_for_dev
	fi

	# zpool import refuse to import without a valid mtab
	[ ! -f /proc/mounts ] && mount proc /proc
	[ ! -f /etc/mtab ] && cat /proc/mounts > /etc/mtab

	# Load the module, without importing any pools - we want manual
	# control over that part!
	modprobe zfs zfs_autoimport_disable=1

	# ERROR: 'zfs_autoimport_disable=1' don't seem to be working in >= 0.6.3.
	# Export every pool we find!
	for pool in $(zpool list -H -oname)
	do
		zpool export $pool
	done

	if [ "$ZFS_INITRD_POST_MODPROBE_SLEEP" -gt '0' ]
	then
		[ "$quiet" != "y" ] && $log_begin_msg "Sleeping for $ZFS_INITRD_POST_MODPROBE_SLEEP seconds..."
		sleep "$ZFS_INITRD_POST_MODPROBE_SLEEP"
		[ "$quiet" != "y" ] && $log_end_msg
	fi

	# Look for the cache file
	if [ -f /etc/zfs/zpool.cache ]; then
		ZPOOL_CACHE=/etc/zfs/zpool.cache
	elif [ -f /boot/zfs/zpool.cache ]; then
		ZPOOL_CACHE=/boot/zfs/zpool.cache
	fi

	# 'ROOT' is for Debian GNU/Linux (etc), 'root' is for Redhat/Fedora (etc)
	if [ -n "$root" -a -z "$ROOT" ]
	then
		ROOT=${root}
	fi

	# 'rootmnt' is for Debian GNU/Linux (etc), 'NEWROOT' is for RedHat/Fedora (etc)
	if [ -n "$NEWROOT" -a -z "$rootmnt" ]
	then
		rootmnt=${NEWROOT}
	fi

	# ----------------------------------------------------------------
	# G E T  P O O L  A N D  R O O T  F I L E S Y S T E M

	# Supports the following kernel command line argument combinations
	# (in this order - first match win):
	#
	#	rpool=<pool>
	#	bootfs=<pool>/<dataset>
	#	rpool=<pool> bootfs=<pool>/<dataset>
	#	-B zfs-bootfs=<pool>/<fs>
	#	rpool=rpool		(default if none of the above is used)
	#	root=<pool>/<dataset>
	#	root=ZFS=<pool>/<dataset>
	#	root=zfs:AUTO
	#	root=zfs:<pool>/<dataset>
	#
	# Option <dataset> could also be <snapshot>
	#
	# In addition, setting one of zfs_force, zfs.force or zfsforce to
	# yes, on or 1 will force import the pool.

	# Support force option
	ZPOOL_FORCE=""
	if grep -qiE '(^|[^\\](\\\\)* )(zfs_force|zfs\.force|zfsforce)=(on|yes|1)( |$)' /proc/cmdline
	then
		ZPOOL_FORCE="-f"
	fi

	# ------------
	# Look for 'rpool' and 'bootfs' parameter
	ZFS_RPOOL="${rpool#rpool=}"
	ZFS_BOOTFS="${bootfs#bootfs=}"

	# ------------
	# Check for the `-B zfs-bootfs=%s/%u,...` kind of parameter.
	# NOTE: Only use the pool name. The rest is not supported by ZoL.
	if [ -z "$ZFS_RPOOL" ]
	then
		# The ${zfs-bootfs} variable is set at the kernel commmand
		# line, usually by GRUB, but it cannot be referenced here
		# directly because bourne variable names cannot contain a
		# hyphen.
		#
		# Reassign the variable by dumping the environment and
		# stripping the zfs-bootfs= prefix.  Let the shell handle
		# quoting through the eval command.
		eval ZFS_RPOOL=$(set | sed -n -e 's,^zfs-bootfs=,,p')

		# Only the pool name is relevant because the ZFS filesystem on
		# Linux is extrinsic and the userland cannot resolve a ZFS
		# object number.
		#
		# Strip everything after the first slash character.
		ZFS_RPOOL=${ZFS_RPOOL%%/*}
	fi

	# ------------
	# rpool= but no bootfs=,root=ZFS or root=zfs: options.
	if [ -n "$ZFS_RPOOL" -a -z "$ZFS_BOOTFS" ] && ! echo "$ROOT" | egrep -q "ZFS=|zfs:"
	then
		# Do auto detect. Do this by 'cheating' - set 'root=zfs:AUTO' which
		# will be caught later
		ZFS_BOOTFS=
		ROOT=zfs:AUTO
	fi

	# ------------
	# Support the 'root=<pool>/<dataset>' option.
	if [ -z "$ZFS_RPOOL" -a -z "$ZFS_BOOTFS" -a -n "$ROOT" ] && ! echo "$ROOT" | egrep -iq "^/|^zfs"
	then
		# Strip everything after the first slash character.
		ZFS_RPOOL=${ROOT%%/*}
		ZFS_BOOTFS=$ROOT
	fi

	# ------------
	# Support the 'root=ZFS=....' parameter (Debian GNU/Linux default)
	if [ -z "$ZFS_BOOTFS" ] && echo "$ROOT" | grep -q "ZFS="
	then
		ZFS_BOOTFS="${ROOT##*=}"
	fi

	# ------------
	# Support Fedora/Redhat type argument 'root=zfs:....'
	if [ -z "$ZFS_BOOTFS" ] && echo "$ROOT" | grep -q "^zfs:"
	then
		if [ "$ROOT" = "zfs:AUTO" ]
		then
			# Might be imported by the kernel module, so try searching before
			# we import anything.
			ZFS_BOOTFS=`zpool list -H -o bootfs | sed -n '/^-$/ !p' | sed 'q'`
		        if [ "$?" != "0"  -o -z "$ZFS_BOOTFS" -o \
			   "$ZFS_BOOTFS" = "no pools available" ]
			then
				# Not there, so we need to import everything.

				[ "$quiet" != "y" ] && $log_begin_msg "Attempting to import additional pools."

				# Get a list of pools available for import
				if [ -n "$ZFS_RPOOL" ]
				then
					# We've specified a pool - check only that
					POOLS=$ZFS_RPOOL
				else
					POOLS=$(zpool import 2>&1 | grep 'pool: ' | sed 's,.*: ,,')
				fi

				for pool in $POOLS
				do
					if [ -n "$ZFS_POOL_EXCEPTIONS" ]
					then
						for exception in $ZFS_POOL_EXCEPTIONS
						do
							[ "$pool" == "$exception" ] && continue 2
						done
					fi

					if [ "$USE_DISK_BY_ID" == 'yes' ]
					then
						# First try all the by-* dirs
						for dir in /dev/disk/by-*
						do
							ZFS_STDERR=$(zpool import -d $dir -f -N  $pool 2>&1)
							ZFS_ERROR=$?

		 					ZFS_BOOTFS=$(zpool list -H -o bootfs $pool)
							if [ -n "$ZFS_BOOTFS" -a "$ZFS_BOOTFS" != "-" ]
							then
								# Keep it mounted
								POOL_MOUNTED=1
								break 3
							else
								zpool export $pool
							fi
						done
					fi

					# If by-* fails, try using the cache file (if it exists)
					if [ -n "$ZPOOL_CACHE" -a -z "$POOL_MOUNTED" ]
					then
						ZFS_STDERR=$(zpool import -c ${ZPOOL_CACHE} -f -N)
						ZFS_ERROR=$?

	 					ZFS_BOOTFS=$(zpool list -H -o bootfs $pool)
						if [ -n "$ZFS_BOOTFS" -a "$ZFS_BOOTFS" != "-" ]
						then
							# Keep it mounted
							POOL_MOUNTED=1
							break 2
						else
							zpool export $pool
						fi
					fi
				done

				[ "$quiet" != "y" ] && $log_end_msg $ZFS_ERROR
			fi
		else
			# No auto - use overrides.
			ZFS_BOOTFS="${ROOT#zfs:}"
			ZFS_RPOOL="${ZFS_BOOTFS%%/*}"
		fi
	fi

	if [ -z "$ZFS_RPOOL" -a -n "$ZFS_BOOTFS" ]
	then
		# We (still) don't have the POOL, but we have a BOOTFS. The
		# pool is (should be the the first part of the bootfs dataset
		# path)...
		ZFS_RPOOL="${ZFS_BOOTFS%%/*}"
	fi

	# ----------------------------------------------------------------
	# I M P O R T  P O O L

	if [ -z "$POOL_MOUNTED" ]
	then
		[ "$quiet" != "y" ] && $log_begin_msg "Importing ZFS root pool $ZFS_RPOOL"

		if [ "$USE_DISK_BY_ID" == 'yes' ]
		then
			# Attempt 1: Try using /dev/disk/by-*.
			for dir in /dev/disk/by-*
			do
				ZFS_CMD="zpool import -N -d $dir ${ZFS_RPOOL} ${ZPOOL_FORCE}"
				ZFS_STDERR=$($ZFS_CMD 2>&1)
				ZFS_ERROR=$?

				if [ "$ZFS_ERROR" == 0 ]
				then
					POOL_MOUNTED=1
					break
				else
					echo "FAIL: $ZFS_CMD. Retrying..."
				fi
			done
		fi

		# Attempt 2: Try using the cache file
		if [ -n "$ZPOOL_CACHE" -a -z "$POOL_MOUNTED" ]
		then
			ZFS_CMD="zpool import -c ${ZPOOL_CACHE} -N ${ZFS_RPOOL} ${ZPOOL_FORCE}"
			ZFS_STDERR=$($ZFS_CMD 2>&1)
			ZFS_ERROR=$?

			if [ "$ZFS_ERROR" == 0 ]
			then
				POOL_MOUNTED=1
			else
				echo "FAIL: $ZFS_CMD. Retrying..."
			fi
		fi

		# Attempt 3: Last ditch attempt.
		if [ -z "$POOL_MOUNTED" ]
		then
			ZFS_CMD="zpool import -N ${ZFS_RPOOL} ${ZPOOL_FORCE}"
			ZFS_STDERR=$($ZFS_CMD 2>&1)
			ZFS_ERROR=$?

			if [ "$ZFS_ERROR" == 0 ]
			then
				POOL_MOUNTED=1
				break
			else
				echo "FAIL: $ZFS_CMD. Retrying..."
			fi
		fi
		[ "$quiet" != "y" ] && $log_end_msg

		if [ -z "$POOL_MOUNTED" -a "$ZFS_ERROR" != 0 ]
		then
			# Unable to import pool -- let the user sort this out
			disable_plymouth
			echo ""
			echo "Command: $ZFS_CMD"
			echo "Message: $ZFS_STDERR"
			echo "Error: $ZFS_ERROR"
			echo ""
			echo "Manually import the root pool at the command prompt and then exit."
			echo "Hint: Try:  zpool import -R / -N ${ZFS_RPOOL}"
			/bin/sh
		fi
	fi

	# ----------------------------------------------------------------

	# Booting from a snapshot?
	if [ -n "$ZFS_BOOTFS" ] && echo "$ZFS_BOOTFS" | grep -q '@'
	then
		# Make sure that the snapshot specified exist.
		if ! zfs get -H type $ZFS_BOOTFS 2> /dev/null | grep -q "^$ZFS_BOOTFS"
		then
			# Use the original dataset (the part before '@').
			[ "$quiet" != "y" ] && $log_begin_msg "Snapshot does not exist. Using base dataset for root."
			ZFS_BOOTFS=`echo "$ZFS_BOOTFS" | sed 's,@.*,,'`
			[ "$quiet" != "y" ] && $log_end_msg
		else
			# Replace the '@' separating dataset and snapshot name with a underscore
			# NOTE: This might not be the prettiest, but at least we'll know where the
			#       dataset came from.
			dset=`echo "$ZFS_BOOTFS" | sed 's,@,_,'`

			# If the destination dataset for the clone already exists, destroy it.
			if zfs get -H type $dset 2> /dev/null | grep -q "^$dset"
			then
				[ "$quiet" != "y" ] && $log_begin_msg "Destroying clone destination dataset"
				ZFS_CMD="zfs destroy $dset"
				ZFS_STDERR=$($ZFS_CMD 2>&1)
				ZFS_ERROR=$?

				# Destroying the clone target was not successfull -- let the user sort this out
				if [ "$ZFS_ERROR" != 0 ]
				then
					disable_plymouth
					echo ""
					echo "Command: $ZFS_CMD"
					echo "Message: $ZFS_STDERR"
					echo "Error: $ZFS_ERROR"
					echo ""
					echo "Failed to destroy the already existing dataset the clone would create."
	                                echo "Please make sure that '$dset' is not availible."
					/bin/sh

					ZFS_ERROR=0
				else
					[ "$quiet" != "y" ] && $log_end_msg
				fi
			fi

			# Clone the snapshot into a dataset we can boot from
			[ "$quiet" != "y" ] && $log_begin_msg "Cloning boot snapshot to dataset"
			ZFS_CMD="zfs clone $ZFS_BOOTFS $dset"
			ZFS_STDERR=$($ZFS_CMD 2>&1)
			ZFS_ERROR=$?

			# Clone was not successfull -- let the user sort this out
			if [ "$ZFS_ERROR" != 0 ]
			then
				disable_plymouth
				echo ""
				echo "Command: $ZFS_CMD"
				echo "Message: $ZFS_STDERR"
				echo "Error: $ZFS_ERROR"
				echo ""
				echo "Failed to clone snapshot."
                                echo "Make sure that the any problems are corrected and then make sure"
                                echo "that the dataset '$dset' exists and is bootable."
				/bin/sh

				ZFS_ERROR=0
			else
				[ "$quiet" != "y" ] && $log_end_msg
			fi

			# Success - unmount the filesystem
			umount /$dset

			# Use the clone as bootfs.
			ZFS_BOOTFS="$dset"
		fi
	fi

	# Last ditch attempt - try to find the bootfs automatically
	if [ -z "$ZFS_BOOTFS" ]
	then
		[ "$quiet" != "y" ] && $log_begin_msg "Getting ZFS bootfs property"
		ZFS_BOOTFS=$(zpool list -H -o bootfs "$ZFS_RPOOL")
		ZFS_ERROR=$?
		[ "$quiet" != "y" ] && $log_end_msg
	fi

	if [ -z "$ZFS_BOOTFS" ]
	then
		# Unable to figure out the bootfs -- let the user sort this out
		disable_plymouth
		echo ""
		echo "Command: zpool list -H -o bootfs $ZFS_RPOOL"
		echo "Error: $ZFS_ERROR, unable to get the bootfs property."
		echo ""
		echo "Manually mount the root filesystem on $rootmnt and then exit."
		echo "Hint: Try:  mount -t zfs -o zfsutil $ZFS_RPOOL/ROOT/system $rootmnt"
		/bin/sh
	fi

	# ----------------------------------------------------------------
	# M O U N T  R O O T  F I L E S Y S T E M

	if zfs 2>&1 | grep -q 'key -l '
	then
		# 'zfs key' is availible (hence we have crypto), check if filesystem is encrypted.
		set -- `zfs get encryption $ZFS_BOOTFS | grep ^$ZFS_RPOOL`
		crypt_type=$3
		if [ "$crypt_type" != "off" ]
		then
			[ "$quiet" != "y" ] && $log_begin_msg "Loading crypto wrapper key for $ZFS_BOOTFS"

			# Just make sure that ALL crypto modules module is loaded.
			# Simplest just to load all...
			for mod in sun-ccm sun-gcm sun-ctr
			do
				modprobe $mod
			done

			# If the key isn't availible, then this will fail!
			ZFS_CMD="zfs key -l -r $ZFS_BOOTFS"
			ZFS_STDERR=$($ZFS_CMD 2>&1)
			ZFS_ERROR=$?

			if [ "$ZFS_ERROR" != 0 ]
			then
			    disable_plymouth
			    echo ""
			    echo "Command: $ZFS_CMD"
			    echo "Message: $ZFS_STDERR"
			    echo "Error: $ZFS_ERROR"
			    echo ""
			    echo "Failed to load zfs encryption wrapper key (s)."
			    echo "Please verify dataset property 'keysource' for datasets"
			    echo "and rerun: $ZFS_CMD"
			    /bin/sh

			    ZFS_ERROR=0
			else
			    [ "$quiet" != "y" ] && $log_end_msg
			fi
		fi
	fi

	# Ideally, the root filesystem would be mounted like this:
	#
	#   zpool import -R "$rootmnt" -N "$ZFS_RPOOL"
	#   zfs mount -o mountpoint=/ "$ZFS_BOOTFS"
	#
	# but the MOUNTPOINT prefix is preserved on descendent filesystem after
	# the pivot into the regular root, which later breaks things like
	# `zfs mount -a` and the /etc/mtab refresh.

	[ "$quiet" != "y" ] && $log_begin_msg "Mounting root filesystem"
	mountpoint=`zfs get -H -o value mountpoint $ZFS_BOOTFS`
	if [ "$mountpoint" = "legacy" ] ; then
		ZFS_CMD="mount -t zfs"
	else
		ZFS_CMD="mount -o zfsutil -t zfs"
	fi
	ZFS_STDERR=$($ZFS_CMD ${ZFS_BOOTFS} ${rootmnt} 2>&1)
	ZFS_ERROR=$?
	[ "$quiet" != "y" ] && $log_end_msg

	if [ "$ZFS_ERROR" != 0 ]
	then
		disable_plymouth
		echo ""
		echo "Command: ${ZFS_CMD} ${ZFS_BOOTFS} ${rootmnt}"
		echo "Message: $ZFS_STDERR"
		echo "Error: $ZFS_ERROR"
		echo ""
		echo "Manually mount the root filesystem on $rootmnt and then exit."
		/bin/sh
	fi

	# ----------------------------------------------------------------
	# M O U N T   A D D I T I O N A L   F I L E S Y S T E M S   R E Q U I R E D
	if [ -n "$ZFS_INITRD_ADDITIONAL_DATASETS" ]
	then
		ZFS_CMD="mount -o zfsutil -t zfs"

		for fs in $ZFS_INITRD_ADDITIONAL_DATASETS
		do
			mountpoint=`zfs get -H -o value mountpoint $fs`
			ZFS_STDERR=$($ZFS_CMD ${fs} ${rootmnt}/${mountpoint} 2>&1)
			ZFS_ERROR=$?
			[ "$quiet" != "y" ] && $log_end_msg

			if [ "$ZFS_ERROR" != 0 ]
			then
				disable_plymouth
				echo ""
				echo "Command: ${ZFS_CMD} ${fs} ${rootmnt}/${mountpoint}"
				echo "Message: $ZFS_STDERR"
				echo "Error: $ZFS_ERROR"
				echo ""
				echo "Manually mount the filesystem on $rootmnt/$mountpoint and then exit."
				/bin/sh
			fi
		done
	fi

	if [ -n "$ZPOOL_DEBUG" ]
	then
		set +x

		echo "DEBUG: imported pools:"
		zpool list -H
		echo

		echo "DEBUG: mounted ZFS filesystems:"
		mount | grep zfs
		echo

		echo -n "=> waiting for ENTER before continuing because of 'zfsdebug=1': "
		read b
	fi

	# ----------------------------------------------------------------
	if type run_scripts > /dev/null 2>&1 && [ -f "/scripts/local-bottom" -o -d "/scripts/local-bottom" ]
	then
		[ "$quiet" != "y" ] && $log_begin_msg "Running /scripts/local-bottom"
		run_scripts /scripts/local-bottom
		[ "$quiet" != "y" ] && $log_end_msg
	fi
}
