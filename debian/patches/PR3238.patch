commit bdfd162657abf84733c99a6f38bd2bc2092ba929
Author: Turbo Fredriksson <turbo@bayour.com>
Date:   Mon Mar 30 18:05:19 2015 +0000

    Allow "zfs unshare <proto> -a" much like "zfs share <proto> -a".

Index: pkg-zfs/cmd/zfs/zfs_main.c
===================================================================
--- pkg-zfs.orig/cmd/zfs/zfs_main.c	2016-03-29 17:37:22.333547866 +0200
+++ pkg-zfs/cmd/zfs/zfs_main.c	2016-03-29 17:41:41.677541626 +0200
@@ -6282,7 +6282,7 @@
 			(void) fprintf(stderr, gettext("cannot unshare '%s': "
 			    "not currently shared\n"), path);
 		} else {
-			ret = zfs_unshareall_bypath(zhp, path);
+			ret = zfs_unshareall_bypath(zhp, path, NULL);
 		}
 	} else {
 		char mtpt_prop[ZFS_MAXPROPLEN];
@@ -6324,7 +6324,7 @@
 	char sharesmb[ZFS_MAXPROPLEN];
 
 	/* check options */
-	while ((c = getopt(argc, argv, op == OP_SHARE ? "a" : "af")) != -1) {
+	while ((c = getopt(argc, argv, op == OP_SHARE ? ":a" : "af")) != -1) {
 		switch (c) {
 		case 'a':
 			do_all = 1;
@@ -6332,6 +6332,11 @@
 		case 'f':
 			flags = MS_FORCE;
 			break;
+		case ':':
+			(void) fprintf(stderr, gettext("missing argument for "
+			    "'%c' option\n"), optopt);
+			usage(B_FALSE);
+			break;
 		case '?':
 			(void) fprintf(stderr, gettext("invalid option '%c'\n"),
 			    optopt);
@@ -6363,6 +6368,19 @@
 		unshare_unmount_node_t *node;
 		uu_avl_index_t idx;
 		uu_avl_walk_t *walk;
+		char *protocol = NULL;
+
+		if (op == OP_SHARE && argc > 0) {
+			if (strcmp(argv[0], "nfs") != 0 &&
+			    strcmp(argv[0], "smb") != 0) {
+				(void) fprintf(stderr, gettext("share type "
+				    "must be 'nfs' or 'smb'\n"));
+				usage(B_FALSE);
+			}
+			protocol = argv[0];
+			argc--;
+			argv++;
+		}
 
 		if (argc != 0) {
 			(void) fprintf(stderr, gettext("too many arguments\n"));
@@ -6459,7 +6477,7 @@
 			switch (op) {
 			case OP_SHARE:
 				if (zfs_unshareall_bypath(node->un_zhp,
-				    node->un_mountp) != 0)
+				    node->un_mountp, protocol) != 0)
 					ret = 1;
 				break;
 
Index: pkg-zfs/include/libzfs.h
===================================================================
--- pkg-zfs.orig/include/libzfs.h	2016-03-29 17:37:22.333547866 +0200
+++ pkg-zfs/include/libzfs.h	2016-03-29 17:42:13.297540865 +0200
@@ -750,7 +750,7 @@
 extern int zfs_unshareall_nfs(zfs_handle_t *);
 extern int zfs_unshareall_smb(zfs_handle_t *);
 extern int zfs_unshareall_iscsi(zfs_handle_t *);
-extern int zfs_unshareall_bypath(zfs_handle_t *, const char *);
+extern int zfs_unshareall_bypath(zfs_handle_t *, const char *, const char *);
 extern int zfs_unshareall(zfs_handle_t *);
 extern int zfs_deleg_share_nfs(libzfs_handle_t *, char *, char *, char *,
     void *, void *, int, zfs_share_op_t);
Index: pkg-zfs/lib/libzfs/libzfs_mount.c
===================================================================
--- pkg-zfs.orig/lib/libzfs/libzfs_mount.c	2016-03-29 17:37:22.245547868 +0200
+++ pkg-zfs/lib/libzfs/libzfs_mount.c	2016-03-29 17:41:41.681541626 +0200
@@ -1037,9 +1037,21 @@
 }
 
 int
-zfs_unshareall_bypath(zfs_handle_t *zhp, const char *mountpoint)
+zfs_unshareall_bypath(zfs_handle_t *zhp, const char *mountpoint,
+    const char *proto)
 {
-	return (zfs_unshare_proto(zhp, mountpoint, share_all_proto));
+	zfs_share_proto_t *curr_proto = NULL;
+
+	if (proto == NULL)
+		curr_proto = share_all_proto;
+	else if (strcmp(proto, "nfs") == 0)
+		curr_proto = nfs_only;
+	else if (strcmp(proto, "smb") == 0)
+		curr_proto = smb_only;
+	else if (strcmp(proto, "iscsi") == 0)
+		curr_proto = iscsi_only;
+
+	return (zfs_unshare_proto(zhp, mountpoint, curr_proto));
 }
 
 /*
